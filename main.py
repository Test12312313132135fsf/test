from config import admin_id
from config import users_id
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import Message
from oauth2client.service_account import ServiceAccountCredentials
import random
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram import executor
import gspread
from google.oauth2.service_account import Credentials
from config import API_TOKENs

API_TOKEN = API_TOKENs
logging.basicConfig(level=logging.INFO)
GOOGLE_SHEETS_CREDENTIALS_FILE = 'rrtt.json'
SPREADSHEET_NAME = 'AdmHelp'
SPREADSHEET_ID = '1ulIRe2rF92XzXU79gTNYkegueByl451gMYVmWyPDMts'
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentials = ServiceAccountCredentials.from_json_keyfile_name('rrtt.json', scope)
client = gspread.authorize(credentials)
SHEET_NAME = 'adw'
SHEETS_NAME = 'rree'
CREDENTIALS_FILE = 'rrtt.json'

# –ó–∞–º–µ–Ω–∏—Ç–µ '1ulIRe2rF92XzXU79gTNYkegueByl451gMYVmWyPDMts' –Ω–∞ –∫–ª—é—á –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
SPREADSHEET_KEY = '1ulIRe2rF92XzXU79gTNYkegueByl451gMYVmWyPDMts'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
credentials = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=['https://spreadsheets.google.com/feeds'])
gc = gspread.authorize(credentials)
spreadsheet = gc.open_by_key(SPREADSHEET_KEY)
sheet = spreadsheet.worksheet('456')  # –†–∞–±–æ—Ç–∞–µ–º —Å –ª–∏—Å—Ç–æ–º 'adw'
async def check_user_id(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ B
    users_id = sheet.col_values(1)  # 2 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü B (–Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id –≤ —Å–ø–∏—Å–∫–µ
    return str(user_id) in users_id



—Åredentials = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=['https://spreadsheets.google.com/feeds'])
gc = gspread.authorize(credentials)
spreadsheet = gc.open_by_key(SPREADSHEET_KEY)
sheet = spreadsheet.worksheet('qwe')  # –†–∞–±–æ—Ç–∞–µ–º —Å –ª–∏—Å—Ç–æ–º 'qwe'
async def check_admin_id(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ B
    admin_id = sheet.col_values(1)  # 2 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü B (–Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id –≤ —Å–ø–∏—Å–∫–µ
    return str(user_id) in users_id















SCOPE = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']
CREDENTIALS_FILE = 'rrtt.json'  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
SHEET = 'nlist'  # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –¥–∞–Ω–Ω—ã–µ

help_comands = """
üìå–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞üìå
/stats - —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/–ª–∏–¥–µ—Ä–æ–≤.
/zovv - —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/myadmins Nick - –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üìå–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ì–ª–∞–≤–Ω—ã—Ö –°–ª–µ–¥—è—â–∏—Öüìå
/myhelpers Nick - –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ê–≥–µ–Ω—Ç–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∏  

üìå–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤üìå
/mystats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/nlist - –Ω–∏–∫–∏ –∏ –≤–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
/sledak - –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª–µ–¥—è—â–∏—Ö

üìå–ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ãüìå
/start - –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞/–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∑–∞–Ω–æ–≤–æ.
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
/id - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π id –≤ telegram.
"""
contactsruk = """
–°–æ—Å—Ç–∞–≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∏ –∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ã:

–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Rival_Sopko:
VK: https://vk.com/id164894947
Telegram: https://t.me/rivalnepidr

–û—Å–Ω–æ–≤–Ω–æ–π –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Skay_Eagle:
VK: https://vk.com/id432296014
Telegram: https://t.me/skayeagle

–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Nikita_Zavgorodnij:
VK: https://vk.com/id703477397
Telegram: https://t.me/nekitpooon

–ö—É—Ä–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ Lisa_Luger:
VK: https://vk.com/id235757929
Telegram: https://t.me/sonnetsi

–ö—É—Ä–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ Vana_Ozuk:
VK: https://vk.com/id204965668
Telegram: https://t.me/Valerch1ik
"""
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

gc = gspread.service_account(filename=GOOGLE_SHEETS_CREDENTIALS_FILE)
sh = gc.open(SPREADSHEET_NAME)
worksheet = sh.get_worksheet(0)
main = ReplyKeyboardMarkup(resize_keyboard=True)
main.add('–ê–¥–º–∏–Ω-—Ä–∞–∑–¥–µ–ª').add('–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞').add('–ö–æ–º–∞–Ω–¥—ã').add('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∏—Ö VK')


async def check_admin_id(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ B
    admin_id_list = sheet.col_values(1)  # 2 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü B (–Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id –≤ —Å–ø–∏—Å–∫–µ
    return str(user_id) in admin_id_list

@dp.message_handler(commands=['stats'])
async def send_max_number(message: Message):
    spreadsheet_id = '1ulIRe2rF92XzXU79gTNYkegueByl451gMYVmWyPDMts'
    sheet = client.open_by_key(spreadsheet_id).get_worksheet(2)
    range_names = 'E118:F118'
    range_name2 = 'E119:F119'
    range_name = 'E120:F120'

    values1 = sheet.get(range_names)
    values2 = sheet.get(range_name2)
    values3 = sheet.get(range_name)

    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    admins = max([int(cell) for row in values1 for cell in row])
    helpers = max([int(cell) for row in values2 for cell in row])
    max_number = max([int(cell) for row in values3 for cell in row])
    user_id = message.from_user.id
    if await check_admin_id(user_id):
        await bot.send_message(message.chat.id,
                               f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {helpers} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–µ—Ä–æ–≤: {max_number}")
    else:
        await message.answer("–¢—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è —á–ª–µ–Ω–æ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞")


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    if await check_user_id(user_id):
        await message.reply("–ü—Ä–∏–≤–µ—Ç,–º–µ–Ω—è –∑–æ–≤—É—Ç PLATINUM MANAGER,–≤–≤–µ–¥–∏ /help –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –º–æ–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.",
                            reply_markup=main)
    else:
        await message.reply("–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–Ω–µ—Å–µ–Ω –≤ white list.")


@dp.message_handler(commands=['id'])
async def id(message: types.Message):
    await message.answer(f'{message.from_user.id}')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat_id
@dp.message_handler(commands=['chat_id'])
async def send_chat_id(message: Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id, f"Chat ID: {chat_id}")


@dp.message_handler(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞')
async def contactruc(message: types.Message):
    user_id = message.from_user.id
    if await check_user_id(user_id):
     await message.answer(text=contactsruk)
    else:
     await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(text='–ö–æ–º–∞–Ω–¥—ã')
async def contactruc(message: types.Message):
    user_id = message.from_user.id
    if await check_user_id(user_id):
     await message.answer(text=help_comands)
    else:
     await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(text='–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∏—Ö VK')
async def contactruc(message: types.Message):
    user_id = message.from_user.id
    if await check_user_id(user_id):
       await get_nlist(message)
    else:
       await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(commands=['gg'])
async def coinflip(message: types.Message):
    outcome = random.choice(["–°–Ω—è—Ç", "–ù–µ —Å–Ω—è—Ç"])
    user_id = message.from_user.id
    if await check_user_id(user_id):
      await message.answer(outcome)
    else:
     await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(text='–ê–¥–º–∏–Ω-—Ä–∞–∑–¥–µ–ª')
async def contactruc(message: types.Message):
    user_id = message.from_user.id
    if await check_user_id(user_id):
        await bot.send_message(message.chat.id,
                               f"–ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(commands=['help'])
async def command1(message: types.Message):
    user_id = message.from_user.id
    if await check_user_id(user_id):
        await message.reply(text=help_comands)
    else:
        await message.reply("–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–Ω–µ—Å–µ–Ω –≤ white list.")


@dp.message_handler(commands=['mystats'])
async def check_user_info(message: types.Message):
    chat_id = message.chat.id

    sheet = client.open("AdmHelp").worksheet(SHEET_NAME)

    records = sheet.get_all_records()

    user_info = None
    for row in records:
        if str(row['user_id']) == str(chat_id):
            user_info = row
            break

    if user_info:
        response_text = f"–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
        for key, value in user_info.items():
            if key != 'user_id':
                response_text += f"{key} {value}\n"
        await message.answer(response_text)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(Command("myhelpers"))
async def cmd_gg(message: types.Message):
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(SPREADSHEET_ID)
    sheet = spreadsheet.get_worksheet(0)
    # –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ user_id
    allowed_user_ids = {1331138032, 1123923238, 1283697883}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—ã –≤—Ö–æ–¥–∏—Ç –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if message.from_user.id not in allowed_user_ids:
        await message.answer("–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∏–∫–Ω–µ–π–º
        command, nickname = message.text.split(' ', 1)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
        records = sheet.get_all_records()

        user_info = None
        for row in records[1:]:  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–∏
            if str(row.get('NickName', '')) == nickname:
                user_info = row
                break

        if user_info:
            response_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ê–≥–µ–Ω—Ç–µ –ü–æ–¥–¥–µ—Ä–∂–∫–∏ —Å NickName {nickname}:\n"
            for key, value in user_info.items():
                response_text += f"{key}: {value}\n"
            await message.answer(response_text)
        else:
            await message.answer(f"–ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å NickName {nickname} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"An error occurred: {e}")
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")


@dp.message_handler(Command("myadmins"))
async def cmd_gg(message: types.Message):
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(SPREADSHEET_ID)
    sheet = spreadsheet.get_worksheet(2)

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∏–∫–Ω–µ–π–º
        command, nickname = message.text.split(' ', 1)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
        records = sheet.get_all_records()

        user_info = None
        for row in records[2:]:  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–∏
            if str(row.get('NickName', '')) == nickname:
                user_info = row
                break

        user_id = message.from_user.id
        if await check_admin_id(user_id):
            if user_info:
                response_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ —Å NickName {nickname}"
                for key, value in user_info.items():
                    if key != 'user_id':  # –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ —Å—Ç–æ–ª–±–∏–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º user_id
                        response_text += f"{key}: {value}\n"
                await message.answer(response_text)
            else:
                await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å NickName {nickname} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await message.answer("–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    except Exception as e:
        logging.error(f"An error occurred: {e}")
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")



@dp.message_handler(commands=['zovv'])
async def send_message_to_users(message: types.Message):
    if message.from_user.id in admin_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —Å–ø–∏—Å–∫–∞
        for user_id in users_id:
            try:
                await bot.send_message(user_id, message.text[6:])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ "/rass "
            except Exception as e:
                logging.exception(e)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞")


async def get_nlist(message: types.Message):
    sheet = client.open_by_key(SPREADSHEET_ID).get_worksheet(1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_worksheet() –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫–æ –≤—Ç–æ—Ä–æ–º—É –ª–∏—Å—Ç—É (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
    values = sheet.get_all_values()
    nlist = '\n'.join([f"{row[0]} - {row[1]}" for row in values])
    await message.answer(nlist)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã nlist
@dp.message_handler(commands=['nlist'])
async def process_nlist_command(message: types.Message):
    user_id = message.from_user.id
    if await check_user_id(user_id):
        await get_nlist(message)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /ff
@dp.message_handler(commands=['sledak'])
async def handle_ff_command(message: types.Message):
    credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, SCOPE)
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(SPREADSHEET_ID)
    sheet = spreadsheet.worksheet(SHEET)
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        sheet = client.open_by_key(SPREADSHEET_ID).get_worksheet(1)
        names = sheet.col_values(4)
        positions = sheet.col_values(5)
        vkontakte = sheet.col_values(6)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        result_message = "–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª–µ–¥—è—â–∏—Ö:\n"
        for i in range(1, len(names)):
            result_message += f"{names[i]} - {positions[i]} - {vkontakte[i]}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = message.from_user.id
        if await check_user_id(user_id):
         await message.answer(result_message)
        else:
            await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

    except Exception as e:
        logging.exception(e)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
